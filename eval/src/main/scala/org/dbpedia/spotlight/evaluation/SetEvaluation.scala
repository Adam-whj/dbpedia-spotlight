/**
 * Copyright 2011 Pablo Mendes, Max Jakob
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.dbpedia.spotlight.evaluation

import io.Source
import java.lang.System
import java.text.NumberFormat
import java.io.{PrintStream, File}

/**
 * The idea here is to compare the set of DBpediaResources generated by each of the spotlight methods.
 * We first load up all the gold standards, then evaluate each method against each of them.
 *
 * @author pablomendes
 */

object SetEvaluation {

  def getManualGold(baseDir: String) :  Map[String, Set[String]] = {
    val mostrelaxed = Source.fromFile(baseDir+"/gold/gold-mostRelaxed-Union.set").getLines.toSet
    val relaxed = Source.fromFile(baseDir+"/gold/gold-relaxed.set").getLines.toSet
    val strict = Source.fromFile(baseDir+"/gold/gold-strict.set").getLines.toSet
    val strictest = Source.fromFile(baseDir+"/gold/gold-strictest-onlyInfobox.set").getLines.toSet
    val manualGold = Map("mostrelaxed"->mostrelaxed, "relaxed"->relaxed, "strict"->strict, "strictest"->strictest);
    manualGold;
  }

  def getCucerzanGold(baseDir: String) :  Map[String, Set[String]] = {
    val cucerzan = Source.fromFile(baseDir+"/gold/cucerzan.set").getLines.toSet
    val cucerzanGold = Map("cucerzan"->cucerzan);
    cucerzanGold
  }

  def getManualSystems(baseDir: String) :  Map[String, Set[String]] = {
    val ontos = Source.fromFile(baseDir+"/systems/AnnotationText-Ontos.txt.set").getLines.toSet
    val ontosHeu = Source.fromFile(baseDir+"/systems/AnnotationText-Ontos.txt.pablo.set").getLines.toSet
    val opencalais = Source.fromFile(baseDir+"/systems/AnnotationText-OpenCalais.txt.nohack.set").getLines.toSet
    val opencalaisHeu = Source.fromFile(baseDir+"/systems/AnnotationText-OpenCalais.txt.set").getLines.toSet
    val wikimachine = Source.fromFile(baseDir+"/systems/AnnotationText-WikiMachine.txt.set").getLines.toSet
    val alchemy = Source.fromFile(baseDir+"/systems/AnnotationText-Alchemy.txt.set").getLines.toSet
    val zemanta = Source.fromFile(baseDir+"/systems/AnnotationText-Zemanta.txt.set").getLines.toSet

    val spotlightNF = Source.fromFile(baseDir+"/spotlight/SpotlightNoFilter.set").getLines.toSet
    val spotlightT10S = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Score.set").getLines.toSet
//    val spotlightT10P = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Prior.set").getLines.toSet
//    val spotlightT10C = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Confusion.set").getLines.toSet
//    val spotlightT10Confidence = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Confidence.set").getLines.toSet
//    val spotlightT10TrialAndError = Source.fromFile(baseDir+"/spotlight/SpotlightTop10TrialAndError.set").getLines.toSet

    val systems = Map("ontos"->ontos,
      "ontosHeu"->ontosHeu,
      "opencalais"->opencalais,
      "opencalaisHeu"->opencalaisHeu,
      "wikimachine"->wikimachine,
      "alchemy"->alchemy,
      "zemanta"->zemanta,
      "spotlightNF"->spotlightNF,
      "spotlightTop10Score"->spotlightT10S
//      "spotlightTop10Prior"->spotlightT10P,
//      "spotlightTop10Confusion"->spotlightT10C,
//      "spotlightTop10Confidence"->spotlightT10Confidence,
//      "spotlightTop10TrialAndError"->spotlightT10TrialAndError
      );
    systems
  }

  def getCucerzanSystems(baseDir: String) :  Map[String, Set[String]] = {
    val ontos = Source.fromFile(baseDir+"/systems/Ontos.list").getLines.toSet
//    val ontosHeu = Source.fromFile(baseDir+"/systems/OntosHeu.list").getLines.toSet
    val opencalais = Source.fromFile(baseDir+"/systems/OpenCalais.list").getLines.toSet
//    val opencalaisHeu = Source.fromFile(baseDir+"/systems/OpenCalaisHeu.list").getLines.toSet
//    val wikimachine = Source.fromFile(baseDir+"/systems/WikiMachine.list").getLines.toSet
    val alchemy = Source.fromFile(baseDir+"/systems/Alchemy.list").getLines.toSet
    val zemanta = Source.fromFile(baseDir+"/systems/Zemanta.list").getLines.toSet
    val spotlightNF = Source.fromFile(baseDir+"/spotlight/SpotlightNoFilter.set").getLines.toSet
    val spotlightT10S = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Score.set").getLines.toSet
    val spotlightT10P = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Prior.set").getLines.toSet
    val spotlightT10C = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Confusion.set").getLines.toSet
    val spotlightT10Confidence = Source.fromFile(baseDir+"/spotlight/SpotlightTop10Confidence.set").getLines.toSet
    val spotlightT10TrialAndError = Source.fromFile(baseDir+"/spotlight/SpotlightTop10TrialAndError.set").getLines.toSet
    val systems = Map("ontos"->ontos,
//      "ontosHeu"->ontosHeu,
      "opencalais"->opencalais,
//      "opencalaisHeu"->opencalaisHeu,
//      "wikimachine"->wikimachine,
      "alchemy"->alchemy,
      "zemanta"->zemanta,
      "spotlightNF"->spotlightNF,
      "spotlightTop10Score"->spotlightT10S,
      "spotlightTop10Prior"->spotlightT10P,
      "spotlightTop10Confusion"->spotlightT10C,
      "spotlightTop10Confidence"->spotlightT10Confidence,
      "spotlightTop10TrialAndError"->spotlightT10TrialAndError
      );
    systems
  }

  def printPoints(baseDir: String, gold: Map[String, Set[String]], systems: Map[String, Set[String]]) {
    System.err.println("Printing points file.");
    for (gk <- gold.keys) {
      var g = gold(gk);
      //System.out.println("Gold size: "+g.size+" ("+gk+")");
      val out = new PrintStream(baseDir+"/"+gk+".points");
      out.println("System, Precision, Recall, F1" );
      for (sk <- systems.keySet.toList.sorted) {
        var s = systems(sk)
        //System.out.println("\tPredicted size: "+s.size);
        val intersection : Double = ((s & g).size)
        //System.out.printf("\t %s & %f & %f \\\\ ", sk, intersection / s.size , intersection / g.size);
        val precision =  intersection / s.size
        val recall = intersection / g.size
        val f1 = 2 * ( precision * recall ) / ( precision + recall )
        out.println(sk+", "+precision+ ", " + recall + ", " + f1);
      }
      out.close();
    }
  }

  def printLine(out: PrintStream, fileName: String, system: String, g: Set[String], support: Int, confidence: Double) {
    System.err.println("Reading: "+fileName);
    val s = Source.fromFile(fileName).getLines.toSet
    //System.out.println("\tPredicted size: "+s.size);
    val intersection : Double = ((s & g).size)
    //System.out.printf("\t %s & %f & %f \\\\ ", sk, intersection / s.size , intersection / g.size);
    val precision =  intersection / s.size
    val recall = intersection / g.size
    val f1 = 2 * ( precision * recall ) / ( precision + recall )
    out.println(system+", "+support+", "+confidence+", "+precision+ ", " + recall + ", " + f1);
  }

  def printLines(baseDir: String, gold: Map[String, Set[String]]) {
    System.err.println("Printing lines file.");
    for (gk <- gold.keys) {
      var g = gold(gk);
      //System.out.println("Gold size: "+g.size+" ("+gk+")");
      val out = new PrintStream(baseDir+"/"+gk+".lines");
      out.println("System, Support, Confidence, Precision, Recall, F1" );
      val system = "spotlight"
      for (support <- EvalParams.supportInterval) {
        for (confidence <- EvalParams.confidenceInterval) {
          //val fileName = baseDir+"/spotlight/Spotlight.c"+confidence+"s"+support+".list";
          val fileName = baseDir+"/spotlight/Spotlight.c"+confidence+"s"+support+".set";
          //val fileName = baseDir+"/spotlight/AnnotationText-Spotlight.c"+confidence+"s"+support+".txt.set";
          printLine(out, fileName, system, g, support, confidence);
        }
      }
      out.close();
    }
  }


  def printTable(gold: Map[String, Set[String]], systems: Map[String, Set[String]])
  {

    //      val baseDir: String = args(0)+"/";
    //      if (!new File(baseDir).exists) {
    //        System.err.println("Base directory does not exist. "+baseDir);
    //        exit();
    //      }
    val nf = NumberFormat.getPercentInstance()

    for (gk <- gold.keys) {
      var g = gold(gk);
      System.out.println("Gold size: "+g.size+" ("+gk+")");
      System.out.println("\tSystem & Precision & Recall & F1 \\\\" );
      for (sk <- systems.keySet.toList.sorted) {
        var s = systems(sk)
        //System.out.println("\tPredicted size: "+s.size);
        val intersection : Double = ((s & g).size)
        //System.out.printf("\t %s & %f & %f \\\\ ", sk, intersection / s.size , intersection / g.size);
        val precision =  intersection / s.size
        val recall = intersection / g.size
        val f1 = 2 * ( precision * recall ) / ( precision + recall )
        System.out.println("\t"+sk+" & "+ nf.format(precision) + " & " + nf.format(recall) + " & " + nf.format(f1) + "\\\\" );
      }
    }

    //      val wikiMachineFileName = baseDir+"AnnotationText-WikiMachine.txt";
    //      val text = Source.fromFile(wikiMachineFileName).getLines.toSet
  }

  def main(args : Array[String])
  {

    //      val baseDir: String = args(0)+"/";
    //      if (!new File(baseDir).exists) {
    //        System.err.println("Base directory does not exist. "+baseDir);
    //        exit();
    //      }
//    val manualEval = new SetEvaluation("/home/pablo/eval/manual");
//    manualEval.printPoints(manualEval.manualGold, manualEval.systems);
//    manualEval.printLines(manualEval.manualGold);

//    val baseDir = "/home/pablo/eval/cucerzan"
//    val cucerzanGold = SetEvaluation.getCucerzanGold(baseDir)
//    val systems = SetEvaluation.getCucerzanSystems(baseDir)
//    printPoints(baseDir, cucerzanGold, systems);
//    printLines(baseDir, cucerzanGold);

    val baseDir = "/home/pablo/eval/manual"
    val gold = SetEvaluation.getManualGold(baseDir)
    val systems = SetEvaluation.getManualSystems(baseDir)
    printPoints(baseDir, gold, systems);
    printLines(baseDir, gold);

  }
}